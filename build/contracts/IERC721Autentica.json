{
  "contractName": "IERC721Autentica",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getInvestorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getInvestor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInvestor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInvestorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"decimals()\":{\"details\":\"Number of decimals used for fees.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getCreator(uint256)\":{\"details\":\"Returns the creator of the `tokenId` token.\",\"params\":{\"tokenId\":\"NFT ID. NOTE: The Autentica Marketplace smart contract supports royalties, so in order for the creator to be paid, we need to know who created the token and that information must stay the same even if the person who owns the token changes.\"}},\"getInvestor(uint256)\":{\"details\":\"Returns the investor of the `tokenId` token.\",\"params\":{\"tokenId\":\"NFT ID. NOTE: Autentica lets other people to pay for the gas fees of the token minting so in that case the minter is not the creator and owner of the token.\"}},\"getInvestorFee(uint256)\":{\"details\":\"Returns the Investor fee of the `tokenId` token.\",\"params\":{\"tokenId\":\"NFT ID.\"}},\"getRoyaltyFee(uint256)\":{\"details\":\"Returns the Royalty fee of the `tokenId` token.\",\"params\":{\"tokenId\":\"NFT ID.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/IERC721Autentica.sol\":\"IERC721Autentica\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/IERC721Autentica.sol\":{\"keccak256\":\"0x91a367c2e9f1a7e507ecf3b7b3dc9e8e023844cf6dd4f8d7ff4bd63251e9d35c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://628ff659d907858193a902e13b73e54a3be218f0fefb33f4215a01cfd2b6a592\",\"dweb:/ipfs/QmcPsrNjug3R3snvwgJ7mArJpvUfWxGh9sXgHX4gJKbr5q\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Autentica is IERC721 {\n    /**\n     * @dev Number of decimals used for fees.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the Royalty fee of the `tokenId` token.\n     * @param tokenId NFT ID.\n     */\n    function getRoyaltyFee(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Returns the Investor fee of the `tokenId` token.\n     * @param tokenId NFT ID.\n     */\n    function getInvestorFee(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Returns the creator of the `tokenId` token.\n     * @param tokenId NFT ID.\n     *\n     * NOTE: The Autentica Marketplace smart contract supports royalties, so in order for the\n     * creator to be paid, we need to know who created the token and that information must\n     * stay the same even if the person who owns the token changes.\n     */\n    function getCreator(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Returns the investor of the `tokenId` token.\n     * @param tokenId NFT ID.\n     *\n     * NOTE: Autentica lets other people to pay for the gas fees of the token minting so\n     * in that case the minter is not the creator and owner of the token.\n     */\n    function getInvestor(uint256 tokenId) external view returns (address);\n}\n",
  "sourcePath": "/Volumes/Storage/Workspace/Projects/Autentica/smart-contracts-playground/contracts/IERC721Autentica.sol",
  "ast": {
    "absolutePath": "project:/contracts/IERC721Autentica.sol",
    "exportedSymbols": {
      "IERC165": [
        4536
      ],
      "IERC721": [
        3204
      ],
      "IERC721Autentica": [
        5292
      ]
    },
    "id": 5293,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5250,
        "literals": [
          "solidity",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:33"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 5251,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5293,
        "sourceUnit": 3205,
        "src": "57:58:33",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5252,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3204,
              "src": "147:7:33"
            },
            "id": 5253,
            "nodeType": "InheritanceSpecifier",
            "src": "147:7:33"
          }
        ],
        "canonicalName": "IERC721Autentica",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 5292,
        "linearizedBaseContracts": [
          5292,
          3204,
          4536
        ],
        "name": "IERC721Autentica",
        "nameLocation": "127:16:33",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5254,
              "nodeType": "StructuredDocumentation",
              "src": "161:57:33",
              "text": " @dev Number of decimals used for fees."
            },
            "functionSelector": "313ce567",
            "id": 5259,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "232:8:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5255,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "240:2:33"
            },
            "returnParameters": {
              "id": 5258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5257,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5259,
                  "src": "266:5:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 5256,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "266:5:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "265:7:33"
            },
            "scope": 5292,
            "src": "223:50:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5260,
              "nodeType": "StructuredDocumentation",
              "src": "279:101:33",
              "text": " @dev Returns the Royalty fee of the `tokenId` token.\n @param tokenId NFT ID."
            },
            "functionSelector": "9e4c0141",
            "id": 5267,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRoyaltyFee",
            "nameLocation": "394:13:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5262,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "416:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5267,
                  "src": "408:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5261,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "407:17:33"
            },
            "returnParameters": {
              "id": 5266,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5265,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5267,
                  "src": "448:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5264,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "448:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "447:9:33"
            },
            "scope": 5292,
            "src": "385:72:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5268,
              "nodeType": "StructuredDocumentation",
              "src": "463:102:33",
              "text": " @dev Returns the Investor fee of the `tokenId` token.\n @param tokenId NFT ID."
            },
            "functionSelector": "f915765b",
            "id": 5275,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInvestorFee",
            "nameLocation": "579:14:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5270,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "602:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5275,
                  "src": "594:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5269,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "594:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "593:17:33"
            },
            "returnParameters": {
              "id": 5274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5273,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5275,
                  "src": "634:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5272,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "634:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "633:9:33"
            },
            "scope": 5292,
            "src": "570:73:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5276,
              "nodeType": "StructuredDocumentation",
              "src": "649:357:33",
              "text": " @dev Returns the creator of the `tokenId` token.\n @param tokenId NFT ID.\n NOTE: The Autentica Marketplace smart contract supports royalties, so in order for the\n creator to be paid, we need to know who created the token and that information must\n stay the same even if the person who owns the token changes."
            },
            "functionSelector": "d48e638a",
            "id": 5283,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCreator",
            "nameLocation": "1020:10:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5279,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5278,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1039:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5283,
                  "src": "1031:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5277,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1031:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1030:17:33"
            },
            "returnParameters": {
              "id": 5282,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5281,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5283,
                  "src": "1071:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5280,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1071:7:33",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1070:9:33"
            },
            "scope": 5292,
            "src": "1011:69:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5284,
              "nodeType": "StructuredDocumentation",
              "src": "1086:268:33",
              "text": " @dev Returns the investor of the `tokenId` token.\n @param tokenId NFT ID.\n NOTE: Autentica lets other people to pay for the gas fees of the token minting so\n in that case the minter is not the creator and owner of the token."
            },
            "functionSelector": "c99dccf9",
            "id": 5291,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInvestor",
            "nameLocation": "1368:11:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5287,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5286,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1388:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5291,
                  "src": "1380:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5285,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1380:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1379:17:33"
            },
            "returnParameters": {
              "id": 5290,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5289,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5291,
                  "src": "1420:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5288,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1420:7:33",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1419:9:33"
            },
            "scope": 5292,
            "src": "1359:70:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5293,
        "src": "117:1314:33",
        "usedErrors": []
      }
    ],
    "src": "32:1400:33"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/IERC721Autentica.sol",
    "exportedSymbols": {
      "IERC165": [
        4536
      ],
      "IERC721": [
        3204
      ],
      "IERC721Autentica": [
        5292
      ]
    },
    "id": 5293,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5250,
        "literals": [
          "solidity",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:33"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 5251,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5293,
        "sourceUnit": 3205,
        "src": "57:58:33",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5252,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3204,
              "src": "147:7:33"
            },
            "id": 5253,
            "nodeType": "InheritanceSpecifier",
            "src": "147:7:33"
          }
        ],
        "canonicalName": "IERC721Autentica",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 5292,
        "linearizedBaseContracts": [
          5292,
          3204,
          4536
        ],
        "name": "IERC721Autentica",
        "nameLocation": "127:16:33",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5254,
              "nodeType": "StructuredDocumentation",
              "src": "161:57:33",
              "text": " @dev Number of decimals used for fees."
            },
            "functionSelector": "313ce567",
            "id": 5259,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "232:8:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5255,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "240:2:33"
            },
            "returnParameters": {
              "id": 5258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5257,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5259,
                  "src": "266:5:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 5256,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "266:5:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "265:7:33"
            },
            "scope": 5292,
            "src": "223:50:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5260,
              "nodeType": "StructuredDocumentation",
              "src": "279:101:33",
              "text": " @dev Returns the Royalty fee of the `tokenId` token.\n @param tokenId NFT ID."
            },
            "functionSelector": "9e4c0141",
            "id": 5267,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRoyaltyFee",
            "nameLocation": "394:13:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5262,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "416:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5267,
                  "src": "408:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5261,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "407:17:33"
            },
            "returnParameters": {
              "id": 5266,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5265,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5267,
                  "src": "448:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5264,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "448:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "447:9:33"
            },
            "scope": 5292,
            "src": "385:72:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5268,
              "nodeType": "StructuredDocumentation",
              "src": "463:102:33",
              "text": " @dev Returns the Investor fee of the `tokenId` token.\n @param tokenId NFT ID."
            },
            "functionSelector": "f915765b",
            "id": 5275,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInvestorFee",
            "nameLocation": "579:14:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5270,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "602:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5275,
                  "src": "594:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5269,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "594:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "593:17:33"
            },
            "returnParameters": {
              "id": 5274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5273,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5275,
                  "src": "634:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5272,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "634:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "633:9:33"
            },
            "scope": 5292,
            "src": "570:73:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5276,
              "nodeType": "StructuredDocumentation",
              "src": "649:357:33",
              "text": " @dev Returns the creator of the `tokenId` token.\n @param tokenId NFT ID.\n NOTE: The Autentica Marketplace smart contract supports royalties, so in order for the\n creator to be paid, we need to know who created the token and that information must\n stay the same even if the person who owns the token changes."
            },
            "functionSelector": "d48e638a",
            "id": 5283,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCreator",
            "nameLocation": "1020:10:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5279,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5278,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1039:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5283,
                  "src": "1031:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5277,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1031:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1030:17:33"
            },
            "returnParameters": {
              "id": 5282,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5281,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5283,
                  "src": "1071:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5280,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1071:7:33",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1070:9:33"
            },
            "scope": 5292,
            "src": "1011:69:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5284,
              "nodeType": "StructuredDocumentation",
              "src": "1086:268:33",
              "text": " @dev Returns the investor of the `tokenId` token.\n @param tokenId NFT ID.\n NOTE: Autentica lets other people to pay for the gas fees of the token minting so\n in that case the minter is not the creator and owner of the token."
            },
            "functionSelector": "c99dccf9",
            "id": 5291,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getInvestor",
            "nameLocation": "1368:11:33",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5287,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5286,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1388:7:33",
                  "nodeType": "VariableDeclaration",
                  "scope": 5291,
                  "src": "1380:15:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5285,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1380:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1379:17:33"
            },
            "returnParameters": {
              "id": 5290,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5289,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5291,
                  "src": "1420:7:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5288,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1420:7:33",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1419:9:33"
            },
            "scope": 5292,
            "src": "1359:70:33",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5293,
        "src": "117:1314:33",
        "usedErrors": []
      }
    ],
    "src": "32:1400:33"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.11+commit.d7f03943.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.4",
  "updatedAt": "2022-02-07T11:45:30.265Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "decimals()": {
        "details": "Number of decimals used for fees."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getCreator(uint256)": {
        "details": "Returns the creator of the `tokenId` token.",
        "params": {
          "tokenId": "NFT ID. NOTE: The Autentica Marketplace smart contract supports royalties, so in order for the creator to be paid, we need to know who created the token and that information must stay the same even if the person who owns the token changes."
        }
      },
      "getInvestor(uint256)": {
        "details": "Returns the investor of the `tokenId` token.",
        "params": {
          "tokenId": "NFT ID. NOTE: Autentica lets other people to pay for the gas fees of the token minting so in that case the minter is not the creator and owner of the token."
        }
      },
      "getInvestorFee(uint256)": {
        "details": "Returns the Investor fee of the `tokenId` token.",
        "params": {
          "tokenId": "NFT ID."
        }
      },
      "getRoyaltyFee(uint256)": {
        "details": "Returns the Royalty fee of the `tokenId` token.",
        "params": {
          "tokenId": "NFT ID."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}